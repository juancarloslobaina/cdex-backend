package com.jacdl.domain;

import static com.jacdl.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class DeliveryAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliveryAllPropertiesEquals(Delivery expected, Delivery actual) {
        assertDeliveryAutoGeneratedPropertiesEquals(expected, actual);
        assertDeliveryAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliveryAllUpdatablePropertiesEquals(Delivery expected, Delivery actual) {
        assertDeliveryUpdatableFieldsEquals(expected, actual);
        assertDeliveryUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliveryAutoGeneratedPropertiesEquals(Delivery expected, Delivery actual) {
        assertThat(expected)
            .as("Verify Delivery auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliveryUpdatableFieldsEquals(Delivery expected, Delivery actual) {
        assertThat(expected)
            .as("Verify Delivery relevant properties")
            .satisfies(
                e ->
                    assertThat(e.getCashAvailable())
                        .as("check cashAvailable")
                        .usingComparator(bigDecimalCompareTo)
                        .isEqualTo(actual.getCashAvailable())
            )
            .satisfies(e -> assertThat(e.getLocation()).as("check location").isEqualTo(actual.getLocation()));
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertDeliveryUpdatableRelationshipsEquals(Delivery expected, Delivery actual) {
        assertThat(expected)
            .as("Verify Delivery relationships")
            .satisfies(e -> assertThat(e.getProviders()).as("check providers").isEqualTo(actual.getProviders()));
    }
}
