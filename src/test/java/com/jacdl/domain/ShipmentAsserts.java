package com.jacdl.domain;

import static com.jacdl.domain.AssertUtils.bigDecimalCompareTo;
import static org.assertj.core.api.Assertions.assertThat;

public class ShipmentAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentAllPropertiesEquals(Shipment expected, Shipment actual) {
        assertShipmentAutoGeneratedPropertiesEquals(expected, actual);
        assertShipmentAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentAllUpdatablePropertiesEquals(Shipment expected, Shipment actual) {
        assertShipmentUpdatableFieldsEquals(expected, actual);
        assertShipmentUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentAutoGeneratedPropertiesEquals(Shipment expected, Shipment actual) {
        assertThat(expected)
            .as("Verify Shipment auto generated properties")
            .satisfies(e -> assertThat(e.getId()).as("check id").isEqualTo(actual.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentUpdatableFieldsEquals(Shipment expected, Shipment actual) {
        assertThat(expected)
            .as("Verify Shipment relevant properties")
            .satisfies(e -> assertThat(e.getReference()).as("check reference").isEqualTo(actual.getReference()))
            .satisfies(e -> assertThat(e.getAmount()).as("check amount").usingComparator(bigDecimalCompareTo).isEqualTo(actual.getAmount()))
            .satisfies(e -> assertThat(e.getCreatedAt()).as("check createdAt").isEqualTo(actual.getCreatedAt()))
            .satisfies(e -> assertThat(e.getStatus()).as("check status").isEqualTo(actual.getStatus()))
            .satisfies(e -> assertThat(e.getType()).as("check type").isEqualTo(actual.getType()))
            .satisfies(e -> assertThat(e.getActive()).as("check active").isEqualTo(actual.getActive()))
            .satisfies(e -> assertThat(e.getScreenshot()).as("check screenshot").isEqualTo(actual.getScreenshot()))
            .satisfies(
                e ->
                    assertThat(e.getScreenshotContentType())
                        .as("check screenshot contenty type")
                        .isEqualTo(actual.getScreenshotContentType())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertShipmentUpdatableRelationshipsEquals(Shipment expected, Shipment actual) {
        assertThat(expected)
            .as("Verify Shipment relationships")
            .satisfies(e -> assertThat(e.getClient()).as("check client").isEqualTo(actual.getClient()))
            .satisfies(e -> assertThat(e.getProvider()).as("check provider").isEqualTo(actual.getProvider()))
            .satisfies(e -> assertThat(e.getDelivery()).as("check delivery").isEqualTo(actual.getDelivery()))
            .satisfies(e -> assertThat(e.getBeneficiary()).as("check beneficiary").isEqualTo(actual.getBeneficiary()));
    }
}
